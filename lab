using System;
using System.Collections.Generic;
using System.Text;
using System.IO;

namespace Universidade
{
    class Aluno
    {
        public char Status;
        public short Matricula, Periodo, Dia, Mes;
        public int Ano;
        public long Telefone;
        public string Nome, Curso, Rua, Bairro, Cidade, Estado,Universidade;

        public Aluno()
        {
			Universidade="";
            Matricula = 0;
            Curso = "";
            Periodo = 0;
            Nome = "";
            Rua = "";
            Bairro = "";
            Cidade = "";
            Estado = "";
            Dia = 0;
            Mes = 0;
            Ano = 0;
            Telefone = 0;
        }

        public void Salvar(BinaryWriter BW)
        {
			BW.Write(Universidade);
            BW.Write(Matricula);
            BW.Write(Curso);
            BW.Write(Periodo);
            BW.Write(Nome);
            BW.Write(Rua);
            BW.Write(Bairro);
            BW.Write(Cidade);
            BW.Write(Estado);
            BW.Write(Dia);
            BW.Write(Mes);
            BW.Write(Ano);
            BW.Write(Telefone);
        }

        public void Ler(BinaryReader BR)
        {
			Universidade =BR.ReadString();
            Matricula = BR.ReadInt16();
            Curso = BR.ReadString();
            Periodo = BR.ReadInt16();
            Nome = BR.ReadString();
            Rua = BR.ReadString();
            Bairro = BR.ReadString();
            Cidade = BR.ReadString();
            Estado = BR.ReadString();
            Dia = BR.ReadInt16();
            Mes = BR.ReadInt16();
            Ano = BR.ReadInt32();
            Telefone = BR.ReadInt64();
        }
        
    }
    class Program
    {
        static string NomeArq = "Aluno.dat";
        static FileStream Arquivo;
        static BinaryWriter Escreve_Arquivo;
        static BinaryReader Ler_Arquivo;
       
        static void Inicializar()
        {
            Arquivo = new FileStream(NomeArq, FileMode.OpenOrCreate, FileAccess.ReadWrite);            
            Escreve_Arquivo = new BinaryWriter(Arquivo);
            Ler_Arquivo = new BinaryReader(Arquivo);

        }

        static void Finalizar()
        {
            Escreve_Arquivo.Close();
            Ler_Arquivo.Close();
            Arquivo.Close();
        }
        static void Main(string[] args)
        {
            Inicializar();
            Menu();
            Finalizar();
        }
        static void Menu()
        {
            byte opcao;
            do
            {
                
                Console.Clear();
                Console.WriteLine("CADASTRO DE ALUNOS");
                Console.WriteLine("========================\n");
                Console.WriteLine("1 - Cadastrar Aluno");
                Console.WriteLine("2 - Excluir Aluno");
                Console.WriteLine("3 - Consultar Aluno por Nome");
                Console.WriteLine("4 - Consultar Aluno por Matricula");
                Console.WriteLine("5 - Relatório de alunos da universidade");
                Console.WriteLine("6 - Relatório de alunos por curso");
                Console.WriteLine("7 - Relatório de alunos por curso de SI");
                Console.WriteLine("8 - Gerar Indíce");
                Console.WriteLine("9 - Sair\n");
                Console.Write("Digite sua opção : ");
                opcao = byte.Parse(Console.ReadLine());

                switch (opcao)
                {
 					case 1:
                        Cadastrar_Aluno();
                        break;
                    case 2:
                        Excluir_Aluno();
                        break;
                    case 3:
                        Consultar_Aluno_Nome();
                        break;
                    case 4:
                        Consultar_Aluno_Matricula();
                        break;
                    case 5:
                        Relatório_Universidade();
                        break;
                    case 6:
                        Relatório_Curso();
                        break;
                    case 7:
                        Relatório_Curso_SI();
                        break;
                    case 8:
                        GerarIndices();
                        break;
                    case 9:
                        opcao = 9;
                        break;
                    default:
                        Console.WriteLine("Opção inválida.");
                        break;

                }
            } while (opcao >= 1 && opcao <= 7);
            Console.ReadKey();
        }
        static public void Cadastrar_Aluno()
        {
            Arquivo.Seek(Arquivo.Length, SeekOrigin.Begin);
            Aluno Al = new Aluno();

            Console.Clear();
			Console.Write("Universidade.....: ");
            Al.Universidade = Console.ReadLine();
            Console.Write("Matrícula.: ");
            Al.Matricula = short.Parse(Console.ReadLine());
            Console.Write("Curso.....: ");
            Al.Curso = Console.ReadLine();
            Console.Write("Período...: ");
            Al.Periodo = short.Parse(Console.ReadLine());
            Console.Write("Nome......: ");
            Al.Nome = Console.ReadLine();
            Console.Write("Rua....: ");
            Al.Rua = Console.ReadLine();
            Console.Write("Bairro.....: ");
            Al.Bairro = Console.ReadLine();
            Console.Write("Estado...: ");
            Al.Estado = Console.ReadLine();
            Console.Write("Dia.....: ");
            Al.Dia = short.Parse(Console.ReadLine());
            Console.Write("Mes.....: ");
            Al.Mes = short.Parse(Console.ReadLine());
            Console.Write("Ano.....: ");
            Al.Ano = int.Parse(Console.ReadLine());
            Console.Write("Telefone...: ");
            Al.Telefone = long.Parse(Console.ReadLine());
            Al.Salvar(Escreve_Arquivo);

        }
        static void Excluir_Aluno()
        {

			 BinaryWriter temp = new BinaryWriter(new FileStream("temp.dat", FileMode.Create, FileAccess.Write));

            Console.Clear();
			Console.WriteLine("EXCLUSÃO DE ALUNOS (POR MATRÍCULA)");
            Console.WriteLine("========================================\n");
            Arquivo.Seek(0, SeekOrigin.Begin);
            short Matricula;
            bool achou = false;
            Aluno Al = new Aluno();
            Console.Write("Matrícula : ");
            Matricula = short.Parse(Console.ReadLine());
            while (Ler_Arquivo.PeekChar() >= 0)
            {
                Al.Ler(Ler_Arquivo);
                if (Al.Matricula != Matricula)
                    Al.Salvar(temp);
                else
                    achou = true;
            }
            temp.Close();
            if (achou)
            {
                Finalizar();
                File.Delete(NomeArq);
                File.Move("temp.dat", NomeArq);
                Console.WriteLine("Aluno excluído com sucesso.\n");
                Inicializar();
            }
            else
            {
                File.Delete("temp.dat");
                Console.WriteLine("Aluno não localizado.\n");
            }
            Console.WriteLine("Pressione qualquer tecla...");
            Console.ReadKey();
        

        }
        static void Consultar_Aluno_Nome()
        {
			string nome, confere_nome;
            long posicao;
			bool axou = false;
            BinaryReader consulta = new BinaryReader(new FileStream("AlNome.idx", FileMode.Open, FileAccess.Read));
            Aluno Al = new Aluno();
            Console.Write("INFORME O NOME DO ALUNO: ");
            nome = Console.ReadLine();
            while (consulta.PeekChar() >= 0 || axou == false)
            {
                confere_nome = consulta.ReadString();
                posicao = consulta.ReadInt64();
                if (confere_nome == nome)
                {
                    Arquivo.Seek(posicao, SeekOrigin.Begin);
                    Al.Ler(Ler_Arquivo);
                    Console.Write("Curso....: {0}\nPeríodo...: {1}", Al.Curso, Al.Periodo);
                    Console.Write("Nome.....: {0}\nRua.......: {1}", Al.Nome, Al.Rua);
                    Console.Write("Bairro...: {0}\nEstado....: {1}", Al.Bairro, Al.Estado);
                    Console.Write("Data_Nasc: {0}-{1}-{2}", Al.Dia, Al.Mes, Al.Ano);
                    Console.Write("\nTelefone.: {0}\n", Al.Telefone);
					axou =true;
                }
                
                
            }
            Console.ReadKey();

        }
        static void Consultar_Aluno_Matricula ()
		{
			BinaryReader ConsultaMatricula = new BinaryReader (new FileStream ("AlMat.idx", FileMode.Open, FileAccess.Read));
			Console.Write ("INFORME A MATRICULA :  ");
			short Matricula, Conferi_Matricula;
			long posicao;
			bool axou = false;
			Aluno Al = new Aluno ();
			Matricula = Int16.Parse (Console.ReadLine ());
			while (ConsultaMatricula.PeekChar() >=0 || axou == false)
			{
				Conferi_Matricula = ConsultaMatricula.ReadInt16 ();
				posicao = ConsultaMatricula.ReadInt64 ();
				if (Conferi_Matricula == Matricula) {
					Al.Ler (Ler_Arquivo);
					Console.WriteLine ("Curso.....: " + Al.Curso);
					Console.WriteLine ("Período...: " + Al.Periodo);
					Console.WriteLine ("Nome......: " + Al.Nome);
					Console.WriteLine ("Rua....: " + Al.Rua);
					Console.WriteLine ("Bairro.....: " + Al.Bairro);
					Console.WriteLine ("Estado...: " + Al.Estado);
					Console.WriteLine ("Data de nascimeto.....: " + Al.Dia + "/" + Al.Mes + "/" + Al.Ano);
		            Console.Write ("Telefone...: " + Al.Telefone);

					axou = true;
				}
			}

			Console.ReadKey();
        }
        static void Relatório_Universidade()
        {
			Arquivo.Seek(0, SeekOrigin.Begin);
            int cont = 0, Pag=1;
            Console.Clear();
            Console.WriteLine("LISTAGEM DE ALUNO (PÁGINA "+Pag+")");
            Console.WriteLine("===================================\n");
            string Universidade, Conferi_Universidade;
			long posicao;
			Aluno Al = new Aluno ();
			Universidade =Console.ReadLine ();
			while (Ler_Arquivo.PeekChar()>=0)
            {

                Al.Ler (Ler_Arquivo);
				Universidade = Convert.ToString(Al.Universidade);//nao to consiguindo ordenar o arquivo
				SortedList<Aluno,List<Aluno>> ordena =new SortedList<Aluno, List<Aluno>>();//ordenar e escrever o relatorio
							ordena.Add (Al.Universidade,
					
					Console.WriteLine ("Período...: " + Al.Periodo);
					Console.WriteLine ("Nome......: " + Al.Nome);
					Console.WriteLine ("Rua....: " + Al.Rua);
					Console.WriteLine ("Bairro.....: " + Al.Bairro);
					Console.WriteLine ("Estado...: " + Al.Estado);
					Console.WriteLine ("Data de nascimeto.....: " + Al.Dia + "/" + Al.Mes + "/" + Al.Ano);
		            Console.WriteLine ("Telefone...: " + Al.Telefone);
				if (Al.Universidade == Universidade) {

					Console.WriteLine ("Curso.....: " + Al.Curso);
					Console.WriteLine ("Período...: " + Al.Periodo);
					Console.WriteLine ("Nome......: " + Al.Nome);
					Console.WriteLine ("Rua....: " + Al.Rua);
					Console.WriteLine ("Bairro.....: " + Al.Bairro);
					Console.WriteLine ("Estado...: " + Al.Estado);
					Console.WriteLine ("Data de nascimeto.....: " + Al.Dia + "/" + Al.Mes + "/" + Al.Ano);
		            Console.WriteLine ("Telefone...: " + Al.Telefone);
								    

				cont++;
		}
                    if (cont == 6)
                    {
                        Pag++;
                        cont = 0;
                        Console.WriteLine("Pressione qualquer tecla...");
                        Console.ReadKey();
                        Console.Clear();
                        Console.WriteLine("LISTAGEM DE ALUNO (PÁGINA " + Pag + ")");
                        Console.WriteLine("===================================\n");
                    }
                
            }
            Console.WriteLine("Pressione qualquer tecla...");
            Console.ReadKey();


        }
        static void Relatório_Curso()
        {



        }
        static void Relatório_Curso_SI()
		{
			Arquivo.Seek(0, SeekOrigin.Begin);

			int cont = 0, Pag=1;
            Console.Clear();
            Console.WriteLine("LISTAGEM DE ALUNO (PÁGINA "+Pag+")");
            Console.WriteLine("===================================\n");
            string Universidade, Conferi_Universidade;
			long posicao;
			Aluno Al = new Aluno ();
			Universidade =Console.ReadLine ();
			while (Ler_Arquivo.PeekChar()>=0)
            {

                Al.Ler (Ler_Arquivo);
				if (Al.Universidade == Universidade) {

					Console.WriteLine ("Curso.....: " + Al.Curso);
					Console.WriteLine ("Período...: " + Al.Periodo);
					Console.WriteLine ("Nome......: " + Al.Nome);
					Console.WriteLine ("Rua....: " + Al.Rua);
					Console.WriteLine ("Bairro.....: " + Al.Bairro);
					Console.WriteLine ("Estado...: " + Al.Estado);
					Console.WriteLine ("Data de nascimeto.....: " + Al.Dia + "/" + Al.Mes + "/" + Al.Ano);
		            Console.Write ("Telefone...: " + Al.Telefone);
										    

				cont++;
				}
                    if (cont == 6)
                    {
                        Pag++;
                        cont = 0;
                        Console.WriteLine("Pressione qualquer tecla...");
                        Console.ReadKey();
                        Console.Clear();
                        Console.WriteLine("LISTAGEM DE ALUNO (PÁGINA " + Pag + ")");
                        Console.WriteLine("===================================\n");
                    }
                
            }
            Console.WriteLine("Pressione qualquer tecla...");
            Console.ReadKey();


        



        }
        static void GerarIndices()
        {
            SortedDictionary<short, long> dicMatricula = new SortedDictionary<short, long>();
            SortedDictionary<string, long> dicNome = new SortedDictionary<string, long>();
            SortedDictionary<string, long> dicUni = new SortedDictionary<string, long>();
			
            BinaryWriter idxMat = new BinaryWriter(new FileStream("AlMat.idx", FileMode.Create, FileAccess.Write));
            BinaryWriter idxNome = new BinaryWriter(new FileStream("AlNome.idx", FileMode.Create, FileAccess.Write));
            BinaryWriter idxUni = new BinaryWriter(new FileStream("AlUni.idx", FileMode.Create, FileAccess.Write));
            Arquivo.Seek(0, SeekOrigin.Begin);
            Aluno Al = new Aluno();
            long ultimaPos = 0;
            while (Ler_Arquivo.PeekChar() >= 0)
            {
                ultimaPos = Arquivo.Position;
                Al.Ler(Ler_Arquivo);
                if (Al.Status != '*')
                {
                    dicMatricula.Add(Al.Matricula, ultimaPos);
                    dicNome.Add(Al.Nome, ultimaPos);
                }
            }

            foreach (KeyValuePair<short, long> kvp in dicMatricula)
            {
                idxMat.Write(kvp.Key);
                idxMat.Write(kvp.Value);
            }

            foreach (KeyValuePair<string, long> kvp in dicNome)
            {
                idxNome.Write(kvp.Key);
                idxNome.Write(kvp.Value);
            }


			foreach (KeyValuePair<string, long> kvp in dicUni)
            {

                idxUni.Write(kvp.Key);
                idxNome.Write(kvp.Value);
            }
            idxMat.Close();
            idxNome.Close();
        }

    }
}
